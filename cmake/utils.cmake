#CMake utility functions and macros


macro(topappend abspath varname)
# We have 2 versions of variable ${varname} - the local copy, and the parent scope's
# Since the local copy is not updated when we update the parent scope,
# to be able to do a next append, we must have the local copy to be in sync with the
# parent copy. This is why we first append to the local copy and then sync it with
# the parent 
 if (${abspath})
    set(topappend_prefx "${CMAKE_CURRENT_SOURCE_DIR}")
 else()
    set(topappend_prefx)
 endif()
 foreach(i IN LISTS ITEMS ${ARGN})
    list(APPEND ${varname} "${topappend_prefx}/${i}")
 endforeach()
 set(${varname} ${${varname}} PARENT_SCOPE)
endmacro(topappend)

# macro(topinclude)
 # topappend(1 dep_includes ${ARGN})
# endmacro(topinclude)

# macro(topinclude_nochg)
 # topappend(0 dep_includes ${ARGN})
# endmacro(topinclude_nochg)

# macro (topdefine)
 # topappend(0 dep_defined ${ARGN})
# endmacro(topdefine)

macro(detectPlatformName var)
if (NOT("$ENV{ANDROID_NDK}" STREQUAL ""))
    set(${var} "android")
elseif (CMAKE_SYSTEM_NAME MATCHES "Linux")
    set(${var} "posix")
elseif (CMAKE_SYSTEM_NAME MATCHES "Darwin")
#add real iOS detection
    if (ios)
        set(${var} "ios")
    else()
        set(${var} "mac")
    endif()
elseif(WIN32)
    set(${var} "win")
endif()
endmacro(detectPlatformName)

macro(detectPlatformArch)
    set(arch "x86" CACHE STRING "Target CPU architecture. Please set manually")
    set_property(CACHE arch PROPERTY STRINGS x86 x64 ia64 arm armv7 armv8 mips mipsel)
    if ("${var}" MATCHES "arm.*")
        set(arch_arm 1)
        string(REGEX REPLACE "^armv" "" arch_arm_ver "${arch}")
    endif()
    if ("${arch}" STREQUAL "x86")
        set(arch_ia32 1)
    endif()
    set("arch_${arch}" 1)
endmacro(detectPlatformArch)

macro(addPlatformSources srcs srcpath rec)
    if (NOT("${srcpath}" STREQUAL "") AND NOT("${srcpath}" MATCHES "^.*\\/$"))
        set(srcpath "${srcpath}/")
    endif()
    detectPlatformName(aps_os)
    if (${rec})
        FILE(GLOB_RECURSE aps_psrcs "${srcpath}*_${aps_os}.c*")
    else()
        FILE(GLOB aps_psrcs "${srcpath}*_${aps_os}.c*")
    endif()
    list(APPEND ${srcs} ${aps_psrcs})
endmacro(addPlatformSources)

macro(listRemoveRegex lst)
    set(lrrx_listcopy ${${lst}})
    foreach(rx IN LIST ITEMS ${ARGN})
      foreach(i IN LISTS ITEMS ${lrrx_listcopy})
        if (${i} MATCHES "${rx}")
            list(REMOVE_ITEMS ${lst} "${i}")
        endif()
      endforeach()
    endforeach()
endmacro(listRemoveRegex)

macro(listSelectRegex lst rx result)
    set("${result}")
    foreach(i IN LISTS ITEMS ${${lst}})
        if ("${i}" MATCHES "${rx}")
            list(APPEND ${result} "${i}")
        endif()
    endforeach()
endmacro(listSelectRegex)

macro(find_mac_frameworks dest)
    foreach(fwk IN LISTS ITEMS ${ARGN})
        find_library(fmf_fwk_fullpath ${fwk})
        list(APPEND ${dest} "${fmf_fwk_fullpath}")
    endforeach()
endmacro(find_mac_frameworks)

macro(listToSpacedString lst)
    set(ltss_str "")
    foreach(i IN LISTS ITEMS ${${lst}})
        if (NOT ("${ltss_str}" STREQUAL ""))
            set(ltss_str "${ltss_str} ${i}")
        else()
            set(ltss_str "${i}")
        endif()
    endforeach()
    set(${lst} "${ltss_str}")
endmacro(listToSpacedString)

function(editTargetProp target propname)
    set(mode "u")
    set(spaced 0)
    get_target_property(flags "${target}" ${propname})
    if ("${flags}" STREQUAL "flags-NOTFOUND")
        set(flags "")
    endif()
    foreach(flag IN LISTS ITEMS ${ARGN})
        if ("${flag}" STREQUAL REMOVE)
            set(mode "r")
        elseif ("${flag}" STREQUAL ADD)
            set(mode "a")
        elseif("${flag}" STREQUAL SPACED)
            set(spaced 1)
        else()
            if ("${mode}" STREQUAL "r")
                list(REMOVE_ITEM flags "${flag}")
            elseif ("${mode}" STREQUAL "a")
                list(FIND flags "${flag}" idx)
                if (${idx} EQUAL -1)
                    list(APPEND flags "${flag}")
                endif()
            else()
                message(FATAL_ERROR "Must specify ADD or REMOVE before the flags")
            endif()
        endif()
    endforeach()
    if (spaced)
        listToSpacedString(flags)
    endif()
    set_target_properties(${target} PROPERTIES ${propname} "${flags}")
endfunction(editTargetProp)

function(addTargetProps target other propname other_propname)
    get_target_property(otherval ${other} ${other_propname})
    get_target_property(thisval ${target} ${propname})
    if ("${otherval}" STREQUAL "otherval-NOTFOUND")
        return()
    endif()
    if ("${thisval}" STREQUAL "thisval-NOTFOUND")
       set(thisval "")
    endif()

    foreach(i IN LISTS ITEMS ${otherval})
        list(FIND thisval "${i}" idx)
        if (${idx} EQUAL -1)
            list(APPEND thisval "${i}")
        endif()
    endforeach()
#    listToSpacedString(thisval str_thisval)    
    set_target_properties(${target} PROPERTIES ${propname} "${thisval}")
endfunction(addTargetProps)

function(target_link_targets target)
    foreach(other IN LISTS ITEMS ${ARGN})
        addTargetProps(${target} ${other} INCLUDE_DIRECTORIES DEP_INCLUDES)
        addTargetProps(${target} ${other} COMPILE_DEFINITIONS DEP_DEFINES)
        addTargetProps(${target} ${other} COMPILE_FLAGS DEP_COMPILE_FLAGS)
    endforeach()
    target_link_libraries(${target} ${ARGN})
endfunction(target_link_targets)

macro(listReplaceInItems lst rx repl)
    set(rli_newlist)
    set(rli_item)
    foreach(i IN LISTS ITEMS ${${lst}})
        STRING(REGEX REPLACE "${rx}" "${repl}" rli_item "${i}")
        list(APPEND rli_newlist "${rli_item}")
    endforeach()
    set("${lst}" ${rli_newlist})
endmacro(listReplaceInItems)

# We need this to be macro because we query the current source dir
macro(targetExportIncludes target)
    set(tei_fullIncs)
    foreach(i IN LISTS ITEMS ${ARGN})
        list(APPEND tei_fullIncs "${CMAKE_CURRENT_SOURCE_DIR}/${i}")
    endforeach()
    editTargetProp("${target}" DEP_INCLUDES ADD "${tei_fullIncs}")
endmacro(targetExportIncludes)

function(targetExportFullpathIncludes target)
    editTargetProp("${target}" DEP_INCLUDES ADD ${ARGN})
endfunction(targetExportFullpathIncludes)

function(targetExportDefines target)
    set(defs ${ARGN})
    listReplaceInItems(defs "^-D" "")
#    message("stripped defines: '${defs}'")
    editTargetProp("${target}" DEP_DEFINES ADD ${defs})
endfunction(targetExportDefines)

function(targetExportCompileFlags target)
    editTargetProp("${target}" DEP_COMPILE_FLAGS ADD ${ARGN})
endfunction(targetExportCompileFlags)

#This doesn't work as there is no LINK_DIRECTORIES property on targets
#function(targetExportLinkdirs target)
#    editTargetProp("${target}" DEP_LINKDIRS ADD ${ARGN})
#endfunction(targetExportLinkdirs)

